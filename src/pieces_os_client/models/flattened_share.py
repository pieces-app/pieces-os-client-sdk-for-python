# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from pieces_os_client.models.access_enum import AccessEnum
from pieces_os_client.models.accessors import Accessors
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.flattened_distributions import FlattenedDistributions
from pieces_os_client.models.grouped_timestamp import GroupedTimestamp
from pieces_os_client.models.score import Score

class FlattenedShare(BaseModel):
    """
    This is a dag safe version of the Share.  if user is undefined && access is public then we have an asset that is publicly available.  # noqa: E501
    """
    access: AccessEnum = Field(...)
    accessors: Accessors = Field(...)
    asset: Optional[StrictStr] = Field(default=None, description="this is the asset id on the flattened share.")
    assets: Optional[FlattenedAssets] = None
    created: GroupedTimestamp = Field(...)
    distributions: Optional[FlattenedDistributions] = None
    id: StrictStr = Field(default=..., description="This references the share it self.")
    link: StrictStr = Field(default=..., description="this is the prebuilt link.")
    name: Optional[StrictStr] = None
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    score: Optional[Score] = None
    short: StrictStr = Field(default=..., description="This is a shortened version of our uuid.")
    user: Optional[StrictStr] = Field(default=None, description="this is the uuid of the user that the share is created for.")
    __properties = ["access", "accessors", "asset", "assets", "created", "distributions", "id", "link", "name", "schema", "score", "short", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlattenedShare:
        """Create an instance of FlattenedShare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of accessors
        if self.accessors:
            _dict['accessors'] = self.accessors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets
        if self.assets:
            _dict['assets'] = self.assets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distributions
        if self.distributions:
            _dict['distributions'] = self.distributions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of score
        if self.score:
            _dict['score'] = self.score.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlattenedShare:
        """Create an instance of FlattenedShare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlattenedShare.parse_obj(obj)

        _obj = FlattenedShare.parse_obj({
            "access": obj.get("access"),
            "accessors": Accessors.from_dict(obj.get("accessors")) if obj.get("accessors") is not None else None,
            "asset": obj.get("asset"),
            "assets": FlattenedAssets.from_dict(obj.get("assets")) if obj.get("assets") is not None else None,
            "created": GroupedTimestamp.from_dict(obj.get("created")) if obj.get("created") is not None else None,
            "distributions": FlattenedDistributions.from_dict(obj.get("distributions")) if obj.get("distributions") is not None else None,
            "id": obj.get("id"),
            "link": obj.get("link"),
            "name": obj.get("name"),
            "var_schema": EmbeddedModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "score": Score.from_dict(obj.get("score")) if obj.get("score") is not None else None,
            "short": obj.get("short"),
            "user": obj.get("user")
        })
        return _obj

from pieces_os_client.models.flattened_assets import FlattenedAssets
FlattenedShare.update_forward_refs()

