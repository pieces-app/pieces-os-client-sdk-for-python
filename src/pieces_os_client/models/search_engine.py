# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.embeddings_search_options import EmbeddingsSearchOptions
from pieces_os_client.models.full_text_search_options import FullTextSearchOptions
from pieces_os_client.models.temporal_search_options import TemporalSearchOptions
from pieces_os_client.models.workstream_search_options import WorkstreamSearchOptions
from typing import Optional, Set
from typing_extensions import Self

class SearchEngine(BaseModel):
    """
    This will determine the type of search that will run  These are all different searching methods all of which are exclusive. Meaning that you cannot mix & match types.  operations: is here if you want to build complex searching behavior. (A || B) && (B || C) , note this can get very complex but can be as flexible as you need.
    """ # noqa: E501
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    query: Optional[StrictStr] = None
    embeddings: Optional[EmbeddingsSearchOptions] = None
    full_text: Optional[FullTextSearchOptions] = None
    temporal: Optional[TemporalSearchOptions] = None
    workstream: Optional[WorkstreamSearchOptions] = None
    operations: Optional[SearchEngines] = None
    __properties: ClassVar[List[str]] = ["schema", "query", "embeddings", "full_text", "temporal", "workstream", "operations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchEngine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embeddings
        if self.embeddings:
            _dict['embeddings'] = self.embeddings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_text
        if self.full_text:
            _dict['full_text'] = self.full_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal
        if self.temporal:
            _dict['temporal'] = self.temporal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workstream
        if self.workstream:
            _dict['workstream'] = self.workstream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operations
        if self.operations:
            _dict['operations'] = self.operations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchEngine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": EmbeddedModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "query": obj.get("query"),
            "embeddings": EmbeddingsSearchOptions.from_dict(obj["embeddings"]) if obj.get("embeddings") is not None else None,
            "full_text": FullTextSearchOptions.from_dict(obj["full_text"]) if obj.get("full_text") is not None else None,
            "temporal": TemporalSearchOptions.from_dict(obj["temporal"]) if obj.get("temporal") is not None else None,
            "workstream": WorkstreamSearchOptions.from_dict(obj["workstream"]) if obj.get("workstream") is not None else None,
            "operations": SearchEngines.from_dict(obj["operations"]) if obj.get("operations") is not None else None
        })
        return _obj

from pieces_os_client.models.search_engines import SearchEngines
# TODO: Rewrite to not use raise_errors
SearchEngine.model_rebuild(raise_errors=False)

