# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OAuthAccount(BaseModel):
    """
    A Model to support account creation to Auth0's Database.
    """ # noqa: E501
    client_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The client_id of your client.")
    email: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's email address.")
    connection: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of the database configured to your client.")
    username: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's username. Only valid if the connection requires a username.")
    given_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's given name(s).")
    family_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's family name(s).")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's full name.")
    picture: Annotated[str, Field(min_length=1, strict=True)] = Field(description="A URI pointing to the user's picture.")
    nickname: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The user's nickname.")
    __properties: ClassVar[List[str]] = ["client_id", "email", "connection", "username", "given_name", "family_name", "name", "picture", "nickname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OAuthAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OAuthAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "email": obj.get("email"),
            "connection": obj.get("connection"),
            "username": obj.get("username"),
            "given_name": obj.get("given_name"),
            "family_name": obj.get("family_name"),
            "name": obj.get("name"),
            "picture": obj.get("picture"),
            "nickname": obj.get("nickname")
        })
        return _obj


