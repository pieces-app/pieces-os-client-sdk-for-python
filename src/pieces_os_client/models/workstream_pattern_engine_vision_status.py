# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from pieces_os_client.models.anonymous_temporal_range import AnonymousTemporalRange
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.migration_progress import MigrationProgress
from typing import Optional, Set
from typing_extensions import Self

class WorkstreamPatternEngineVisionStatus(BaseModel):
    """
    activation: can be active for forever w/ continous true, or it can be activated for the next couple hours  deactivation: here can be deactivated for forever w/ continuous true, or it can be deactivated for the next couple hours  Note: one or the other will be set and both are nullable.  degraded: this is a boolean that will let the products know if we will be operating in a degraded experience (this            means that there was hardware requirements that caused vector searching to fail, therefor we will need to operate           in a slower, and more memory consumption manner)
    """ # noqa: E501
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    activation: Optional[AnonymousTemporalRange] = None
    deactivation: Optional[AnonymousTemporalRange] = None
    degraded: Optional[StrictBool] = None
    migration: Optional[MigrationProgress] = None
    __properties: ClassVar[List[str]] = ["schema", "activation", "deactivation", "degraded", "migration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkstreamPatternEngineVisionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activation
        if self.activation:
            _dict['activation'] = self.activation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deactivation
        if self.deactivation:
            _dict['deactivation'] = self.deactivation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migration
        if self.migration:
            _dict['migration'] = self.migration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkstreamPatternEngineVisionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": EmbeddedModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "activation": AnonymousTemporalRange.from_dict(obj["activation"]) if obj.get("activation") is not None else None,
            "deactivation": AnonymousTemporalRange.from_dict(obj["deactivation"]) if obj.get("deactivation") is not None else None,
            "degraded": obj.get("degraded"),
            "migration": MigrationProgress.from_dict(obj["migration"]) if obj.get("migration") is not None else None
        })
        return _obj


