# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.mechanism_enum import MechanismEnum
from pieces_os_client.models.seeded_anchor import SeededAnchor
from pieces_os_client.models.seeded_annotation import SeededAnnotation
from pieces_os_client.models.seeded_asset_sensitive import SeededAssetSensitive
from pieces_os_client.models.seeded_asset_tag import SeededAssetTag
from pieces_os_client.models.seeded_asset_website import SeededAssetWebsite
from pieces_os_client.models.seeded_hint import SeededHint
from pieces_os_client.models.seeded_person import SeededPerson
from typing import Optional, Set
from typing_extensions import Self

class SeededAssetMetadata(BaseModel):
    """
    This is optional metadata sent with the SeededAsset and other SeededAssets ie (UE, Jetbrains...)  Note: if a user/develop didnt explicitly state a mechanism we will default to manual(user Driven only)
    """ # noqa: E501
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    name: Optional[StrictStr] = Field(default=None, description="This is the name of the asset.")
    mechanism: Optional[MechanismEnum] = None
    tags: Optional[List[SeededAssetTag]] = Field(default=None, description="(optional) can add some tags to associate to this asset.")
    websites: Optional[List[SeededAssetWebsite]] = None
    sensitives: Optional[List[SeededAssetSensitive]] = None
    persons: Optional[List[SeededPerson]] = None
    annotations: Optional[List[SeededAnnotation]] = None
    hints: Optional[List[SeededHint]] = None
    anchors: Optional[List[SeededAnchor]] = None
    __properties: ClassVar[List[str]] = ["schema", "name", "mechanism", "tags", "websites", "sensitives", "persons", "annotations", "hints", "anchors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SeededAssetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in websites (list)
        _items = []
        if self.websites:
            for _item_websites in self.websites:
                if _item_websites:
                    _items.append(_item_websites.to_dict())
            _dict['websites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sensitives (list)
        _items = []
        if self.sensitives:
            for _item_sensitives in self.sensitives:
                if _item_sensitives:
                    _items.append(_item_sensitives.to_dict())
            _dict['sensitives'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in persons (list)
        _items = []
        if self.persons:
            for _item_persons in self.persons:
                if _item_persons:
                    _items.append(_item_persons.to_dict())
            _dict['persons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hints (list)
        _items = []
        if self.hints:
            for _item_hints in self.hints:
                if _item_hints:
                    _items.append(_item_hints.to_dict())
            _dict['hints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in anchors (list)
        _items = []
        if self.anchors:
            for _item_anchors in self.anchors:
                if _item_anchors:
                    _items.append(_item_anchors.to_dict())
            _dict['anchors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SeededAssetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": EmbeddedModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "name": obj.get("name"),
            "mechanism": obj.get("mechanism"),
            "tags": [SeededAssetTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "websites": [SeededAssetWebsite.from_dict(_item) for _item in obj["websites"]] if obj.get("websites") is not None else None,
            "sensitives": [SeededAssetSensitive.from_dict(_item) for _item in obj["sensitives"]] if obj.get("sensitives") is not None else None,
            "persons": [SeededPerson.from_dict(_item) for _item in obj["persons"]] if obj.get("persons") is not None else None,
            "annotations": [SeededAnnotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "hints": [SeededHint.from_dict(_item) for _item in obj["hints"]] if obj.get("hints") is not None else None,
            "anchors": [SeededAnchor.from_dict(_item) for _item in obj["anchors"]] if obj.get("anchors") is not None else None
        })
        return _obj


