# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema

class TrackedUserProfile(BaseModel):
    """
    A user that will be passed along with each analytics event  # noqa: E501
    """
    var_schema: Optional[EmbeddedModelSchema] = Field(None, alias="schema")
    id: StrictStr = Field(..., description="The ID of the user that you are tracking.")
    username: StrictStr = Field(..., description="This is a username that is attempted to be assigned but is \"Anonymous User\" by default")
    email: Optional[StrictStr] = Field(None, description="The user's email if we have it.")
    granularity: StrictStr = Field(..., description="At what level is this user being tracked.")
    __properties = ["schema", "id", "username", "email", "granularity"]

    @validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DEVICE', 'ACCOUNT', 'ANONYMOUS'):
            raise ValueError("must be one of enum values ('DEVICE', 'ACCOUNT', 'ANONYMOUS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackedUserProfile:
        """Create an instance of TrackedUserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackedUserProfile:
        """Create an instance of TrackedUserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackedUserProfile.parse_obj(obj)

        _obj = TrackedUserProfile.parse_obj({
            "var_schema": EmbeddedModelSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "id": obj.get("id"),
            "username": obj.get("username") if obj.get("username") is not None else 'unknown',
            "email": obj.get("email"),
            "granularity": obj.get("granularity") if obj.get("granularity") is not None else 'ANONYMOUS'
        })
        return _obj


