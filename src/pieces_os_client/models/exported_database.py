# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.exported_database_formats import ExportedDatabaseFormats
from typing import Optional, Set
from typing_extensions import Self

class ExportedDatabase(BaseModel):
    """
    ExportedDatabase
    """ # noqa: E501
    analyses: List[StrictInt]
    applications: List[StrictInt]
    assets: List[StrictInt]
    code_analyses: List[StrictInt] = Field(alias="codeAnalyses")
    files: List[StrictInt]
    format_metrics: List[StrictInt] = Field(alias="formatMetrics")
    formats: List[StrictInt]
    fragments: List[StrictInt]
    image_analyses: List[StrictInt] = Field(alias="imageAnalyses")
    models: List[StrictInt]
    ocr_analyses: List[StrictInt] = Field(alias="ocrAnalyses")
    persons: List[StrictInt]
    sensitives: List[StrictInt]
    tags: List[StrictInt]
    websites: List[StrictInt]
    values: ExportedDatabaseFormats
    version: StrictStr = Field(description="This is the version of your os_server or cloud_server that we we exporting from.")
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    relationships: Optional[List[StrictInt]] = None
    activities: Optional[List[StrictInt]] = None
    annotations: Optional[List[StrictInt]] = None
    hints: Optional[List[StrictInt]] = None
    anchors: Optional[List[StrictInt]] = None
    anchor_points: Optional[List[StrictInt]] = Field(default=None, alias="anchorPoints")
    conversations: Optional[List[StrictInt]] = None
    conversation_messages: Optional[List[StrictInt]] = Field(default=None, alias="conversationMessages")
    workstream_events: Optional[List[StrictInt]] = Field(default=None, alias="workstreamEvents")
    ranges: Optional[List[StrictInt]] = None
    workstream_summaries: Optional[List[StrictInt]] = Field(default=None, alias="workstreamSummaries")
    workstream_pattern_engine_sources: Optional[List[StrictInt]] = Field(default=None, alias="workstreamPatternEngineSources")
    message_values: Optional[ExportedDatabaseFormats] = Field(default=None, alias="messageValues")
    workstream_event_values: Optional[ExportedDatabaseFormats] = Field(default=None, alias="workstreamEventValues")
    __properties: ClassVar[List[str]] = ["analyses", "applications", "assets", "codeAnalyses", "files", "formatMetrics", "formats", "fragments", "imageAnalyses", "models", "ocrAnalyses", "persons", "sensitives", "tags", "websites", "values", "version", "schema", "relationships", "activities", "annotations", "hints", "anchors", "anchorPoints", "conversations", "conversationMessages", "workstreamEvents", "ranges", "workstreamSummaries", "workstreamPatternEngineSources", "messageValues", "workstreamEventValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportedDatabase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of values
        if self.values:
            _dict['values'] = self.values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_values
        if self.message_values:
            _dict['messageValues'] = self.message_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workstream_event_values
        if self.workstream_event_values:
            _dict['workstreamEventValues'] = self.workstream_event_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportedDatabase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyses": obj.get("analyses"),
            "applications": obj.get("applications"),
            "assets": obj.get("assets"),
            "codeAnalyses": obj.get("codeAnalyses"),
            "files": obj.get("files"),
            "formatMetrics": obj.get("formatMetrics"),
            "formats": obj.get("formats"),
            "fragments": obj.get("fragments"),
            "imageAnalyses": obj.get("imageAnalyses"),
            "models": obj.get("models"),
            "ocrAnalyses": obj.get("ocrAnalyses"),
            "persons": obj.get("persons"),
            "sensitives": obj.get("sensitives"),
            "tags": obj.get("tags"),
            "websites": obj.get("websites"),
            "values": ExportedDatabaseFormats.from_dict(obj["values"]) if obj.get("values") is not None else None,
            "version": obj.get("version"),
            "schema": EmbeddedModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "relationships": obj.get("relationships"),
            "activities": obj.get("activities"),
            "annotations": obj.get("annotations"),
            "hints": obj.get("hints"),
            "anchors": obj.get("anchors"),
            "anchorPoints": obj.get("anchorPoints"),
            "conversations": obj.get("conversations"),
            "conversationMessages": obj.get("conversationMessages"),
            "workstreamEvents": obj.get("workstreamEvents"),
            "ranges": obj.get("ranges"),
            "workstreamSummaries": obj.get("workstreamSummaries"),
            "workstreamPatternEngineSources": obj.get("workstreamPatternEngineSources"),
            "messageValues": ExportedDatabaseFormats.from_dict(obj["messageValues"]) if obj.get("messageValues") is not None else None,
            "workstreamEventValues": ExportedDatabaseFormats.from_dict(obj["workstreamEventValues"]) if obj.get("workstreamEventValues") is not None else None
        })
        return _obj


