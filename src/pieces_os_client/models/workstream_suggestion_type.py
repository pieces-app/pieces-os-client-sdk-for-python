# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkstreamSuggestionType(BaseModel):
    """
    This is used to map the types of the iterable to given booleans of their respective material types
    """ # noqa: E501
    var_schema: Optional[StrictBool] = Field(default=None, alias="schema")
    summary: Optional[StrictBool] = None
    asset: Optional[StrictBool] = None
    tag: Optional[StrictBool] = None
    website: Optional[StrictBool] = None
    anchor: Optional[StrictBool] = None
    conversation: Optional[StrictBool] = None
    person: Optional[StrictBool] = None
    seed: Optional[StrictBool] = None
    seeds: Optional[StrictBool] = None
    summaries: Optional[StrictBool] = None
    assets: Optional[StrictBool] = None
    tags: Optional[StrictBool] = None
    websites: Optional[StrictBool] = None
    anchors: Optional[StrictBool] = None
    conversations: Optional[StrictBool] = None
    persons: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["schema", "summary", "asset", "tag", "website", "anchor", "conversation", "person", "seed", "seeds", "summaries", "assets", "tags", "websites", "anchors", "conversations", "persons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkstreamSuggestionType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkstreamSuggestionType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "summary": obj.get("summary"),
            "asset": obj.get("asset"),
            "tag": obj.get("tag"),
            "website": obj.get("website"),
            "anchor": obj.get("anchor"),
            "conversation": obj.get("conversation"),
            "person": obj.get("person"),
            "seed": obj.get("seed"),
            "seeds": obj.get("seeds"),
            "summaries": obj.get("summaries"),
            "assets": obj.get("assets"),
            "tags": obj.get("tags"),
            "websites": obj.get("websites"),
            "anchors": obj.get("anchors"),
            "conversations": obj.get("conversations"),
            "persons": obj.get("persons")
        })
        return _obj


