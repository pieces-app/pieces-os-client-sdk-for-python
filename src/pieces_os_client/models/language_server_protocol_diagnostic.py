# coding: utf-8

"""
    Pieces Isomorphic OpenAPI

    Endpoints for Assets, Formats, Users, Asset, Format, User.

    The version of the OpenAPI document: 1.0
    Contact: tsavo@pieces.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pieces_os_client.models.embedded_model_schema import EmbeddedModelSchema
from pieces_os_client.models.language_server_protocol_code import LanguageServerProtocolCode
from pieces_os_client.models.language_server_protocol_code_description import LanguageServerProtocolCodeDescription
from pieces_os_client.models.language_server_protocol_location_range import LanguageServerProtocolLocationRange
from pieces_os_client.models.language_server_protocol_severity_enum import LanguageServerProtocolSeverityEnum
from typing import Optional, Set
from typing_extensions import Self

class LanguageServerProtocolDiagnostic(BaseModel):
    """
    TODO
    """ # noqa: E501
    var_schema: Optional[EmbeddedModelSchema] = Field(default=None, alias="schema")
    range: LanguageServerProtocolLocationRange
    severity: Optional[LanguageServerProtocolSeverityEnum] = None
    code: Optional[LanguageServerProtocolCode] = None
    code_description: Optional[LanguageServerProtocolCodeDescription] = Field(default=None, alias="codeDescription")
    source: Optional[StrictStr] = None
    message: StrictStr
    __properties: ClassVar[List[str]] = ["schema", "range", "severity", "code", "codeDescription", "source", "message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LanguageServerProtocolDiagnostic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_description
        if self.code_description:
            _dict['codeDescription'] = self.code_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LanguageServerProtocolDiagnostic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": EmbeddedModelSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "range": LanguageServerProtocolLocationRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "severity": obj.get("severity"),
            "code": LanguageServerProtocolCode.from_dict(obj["code"]) if obj.get("code") is not None else None,
            "codeDescription": LanguageServerProtocolCodeDescription.from_dict(obj["codeDescription"]) if obj.get("codeDescription") is not None else None,
            "source": obj.get("source"),
            "message": obj.get("message")
        })
        return _obj


